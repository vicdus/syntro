{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","stockInfo","setStockInfo","BASE","fetchStock","symbol","last","a","fetch","response","json","responseJson","meta","chart","result","url","firstTradeDate","regularMarketTime","response2","responseJson2","timestamp","_","takeRight","quote","close","indicators","high","low","open","volume","std","useEffect","UPRO","TQQQ","TMF","UPRO_i","TQQQ_i","TMF_i","TQQQ_p","total_std_i","TMF_p","share","className","Object","entries","map","stock","info","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAkGeA,MA3Df,WAAgB,IAAD,EACqBC,mBAAoB,IADzC,mBACNC,EADM,KACKC,EADL,KAGPC,EAAO,qDAHA,SAIEC,EAJF,gFAIb,WAA0BC,EAAgBC,GAA1C,2BAAAC,EAAA,sEACyBC,MAAM,GAAD,OAAIL,GAAJ,OAAWE,IADzC,cACQI,EADR,gBAEkDA,EAASC,OAF3D,cAEQC,EAFR,OAGQC,EAAOD,EAAaE,MAAMC,OAAO,GAAGF,KAEpCG,EALR,UAKiBZ,GALjB,OAKwBE,EALxB,gCAKsDO,EAAKI,eAL3D,oBAKqFJ,EAAKK,mBAL1F,UAM0BT,MAAMO,GANhC,eAMQG,EANR,iBAOmDA,EAAUR,OAP7D,eAOQS,EAPR,yBAUS,CACLC,UAAWC,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGM,UAAWd,GAChEiB,MAAO,CACLC,MAAOH,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGC,MAAOlB,GAC5EoB,KAAML,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGG,KAAMpB,GAC1EqB,IAAKN,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGI,IAAKrB,GACxEsB,KAAMP,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGK,KAAMtB,GAC1EuB,OAAQR,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGM,OAAQvB,IAEhFwB,IAAKA,YAAIT,IAAEC,UAAUH,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGC,MAAOlB,KAAzE,UAAmFe,IAAEf,KAAKa,EAAcN,MAAMC,OAAO,GAAGW,WAAWF,MAAM,GAAGC,cAA5I,QAAsJ,KAnB/J,6CAJa,sBAkDb,OAvBAO,qBAAU,WACR,sBAAC,4CAAAxB,EAAA,sEACoBH,EAAW,OAAQ,IADvC,cACO4B,EADP,gBAEoB5B,EAAW,OAAQ,IAFvC,cAEO6B,EAFP,gBAGmB7B,EAAW,MAAO,IAHrC,OAGO8B,EAHP,OAKOC,EAAS,EAAIH,EAAKF,IAClBM,EAAS,EAAIH,EAAKH,IAClBO,EAAQ,EAAIH,EAAIJ,IAIhBQ,EAASF,GAHTG,EAAcJ,EAASC,EAASC,GAIhCG,EAAQH,EAAQE,EACtBrC,EAAa,CACX8B,KAAM,CAAES,MAJKN,EAASI,EAICT,IAAKE,EAAKF,KACjCG,KAAM,CAAEQ,MAAOH,EAAQR,IAAKG,EAAKH,KACjCI,IAAK,CAAEO,MAAOD,EAAOV,IAAKI,EAAIJ,OAhBjC,2CAAD,KAmBC,IAID,yBAAKY,UAAU,OACZC,OAAOC,QAAQ3C,GAAW4C,KAAI,mCAAEC,EAAF,KAASC,EAAT,YAC7B,iCAAOD,EAAQ,IAAME,KAAKC,MAAmB,IAAbF,EAAKN,OAAe,aAAeM,EAAKjB,IAAxE,UCxFRoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2a668187.chunk.js","sourcesContent":["import React from 'react';\nimport { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport { std } from \"mathjs\";\n\ntype Quote = {\n  close: Array<number>,\n  high: Array<number>,\n  low: Array<number>,\n  open: Array<number>,\n  volume: Array<number>,\n};\n\ntype Meta = {\n  currency: \"USD\",\n  symbol: string,\n  firstTradeDate: number,\n  regularMarketTime: number,\n};\n\ninterface YahooFianceResponse {\n  chart: {\n    result: Array<{\n      indicators: { quote: Array<Quote>; },\n      meta: Meta,\n      timestamp: Array<number>;\n    }>;\n  };\n}\n\ntype Equity = {\n  timestamp: Array<number>,\n  quote: Quote;\n  std: number;\n};\n\n\n\ntype StockInfo = { [key: string]: { share: number, std: number; }; };\nfunction App() {\n  const [stockInfo, setStockInfo] = useState<StockInfo>({});\n\n  const BASE = \"https://query2.finance.yahoo.com/v8/finance/chart/\";\n  async function fetchStock(symbol: string, last?: number): Promise<Equity> {\n    const response = await fetch(`${BASE}${symbol}`);\n    const responseJson: YahooFianceResponse = await response.json();\n    const meta = responseJson.chart.result[0].meta;\n\n    const url = `${BASE}${symbol}?interval=1d&period1=${meta.firstTradeDate}&period2=${meta.regularMarketTime}`;\n    const response2 = await fetch(url);\n    const responseJson2: YahooFianceResponse = await response2.json();\n\n\n    return {\n      timestamp: _.takeRight(responseJson2.chart.result[0].timestamp, last),\n      quote: {\n        close: _.takeRight(responseJson2.chart.result[0].indicators.quote[0].close, last),\n        high: _.takeRight(responseJson2.chart.result[0].indicators.quote[0].high, last),\n        low: _.takeRight(responseJson2.chart.result[0].indicators.quote[0].low, last),\n        open: _.takeRight(responseJson2.chart.result[0].indicators.quote[0].open, last),\n        volume: _.takeRight(responseJson2.chart.result[0].indicators.quote[0].volume, last),\n      },\n      std: std(_.takeRight(responseJson2.chart.result[0].indicators.quote[0].close, last)) / (_.last(responseJson2.chart.result[0].indicators.quote[0].close) ?? 0)\n    };\n  }\n\n  useEffect(() => {\n    (async () => {\n      const UPRO = await fetchStock('UPRO', 10);\n      const TQQQ = await fetchStock('TQQQ', 10);\n      const TMF = await fetchStock('TMF', 10);\n\n      const UPRO_i = 1 / UPRO.std;\n      const TQQQ_i = 1 / TQQQ.std;\n      const TMF_i = 1 / TMF.std;\n      const total_std_i = UPRO_i + TQQQ_i + TMF_i;\n\n      const UPRO_p = UPRO_i / total_std_i;\n      const TQQQ_p = TQQQ_i / total_std_i;\n      const TMF_p = TMF_i / total_std_i;\n      setStockInfo({\n        UPRO: { share: UPRO_p, std: UPRO.std, },\n        TQQQ: { share: TQQQ_p, std: TQQQ.std, },\n        TMF: { share: TMF_p, std: TMF.std, },\n      });\n    })();\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      {Object.entries(stockInfo).map(([stock, info]) =>\n        <div> {stock + \" \" + Math.round(info.share * 100) + \" %, std = \" + info.std} </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}